setwd("~/sanjana/DataScience/monash/module8-dataexplorationandvisualisation/Project Assignment - Data Visualisation/SanjanaTule_28867424_Code")
#libraries
library(dplyr)
library(tidyr)
library(modeest)
library(stringr)
library(Rtsne)
library(cluster)
library(ggplot2)
###################################### CLUSTERING TO FIND STUDENT SEGMENTS OR CLUSTERS - BASED ON DEMOGRAPHICS / ACADEMIC PERFORMANCE/ VLE ENGAGEMENT ###############################################################
# STEP 1 - Read all input files
# Read student info file
studentinfo  <- read.csv('data/studentinfo.csv')
# Read student vle file ( enagement)
studentvle  <- read.csv('data/studentVle.csv')
# Read assessment file
studentassessment  <- read.csv('data/studentAssessment.csv')
# Read vle file
vle <- read.csv('data/vle.csv')
# Read assessment file
assessment <- read.csv('data/assessments.csv')
# STEP 2 - REMOVE DUPLICATE,TAKE FIRST CODE_MODULE ENROLMENT FOR EVERY STUDENT ALONG WITH DEMO INFO
student_info_summary_stg <- studentinfo %>%
select(id_student,code_module,code_presentation,final_result,gender,highest_education,age_band,region) %>%
arrange(code_presentation,age_band) %>%
group_by(id_student) %>%
filter(row_number() == 1)
# STEP 3 - SUMMARISE STUDENT ASSESSMENT AND GET THE AVERAGE SCORE FOR THAT CODE MODULE
student_assessment_summary_stg <- inner_join(studentassessment,assessment,by=c("id_assessment"))
# take the average score for a code module, for a code presentation for every student
student_assessment_summary <- student_assessment_summary_stg %>%
group_by(id_student,code_module,code_presentation) %>%
summarise(
score_avg = sum(as.numeric(score)) / sum(n())
)
# STEP 4 - JOIN STUDENT DATA WITH THE AVERAGE SCORE
student_info_summary_stg_assess <- left_join(student_info_summary_stg,student_assessment_summary,by=c("id_student","code_module","code_presentation"))
# STEP 5 - SUMMARISE STUDENT VLE ACTIVTIY
#5.1 Get weekly sum of clicks by students per module per content type
student_vle_summary_stg <- studentvle %>%
filter(as.numeric(date)>=0) %>%
#filter(id_student == 28400) %>%
mutate(week_number =
case_when(
ceiling(as.numeric(date)/7) <= 4 ~ 'intial weeks',
ceiling(as.numeric(date)/7) > 4 & ceiling(as.numeric(date)/7) <=30  ~ 'mid weeks',
TRUE  ~ 'late weeks'
)
)%>%
group_by(id_student,week_number,code_module) %>%
summarise(sum_clicks_weekly = sum(as.numeric(sum_click)))
#5.2 join to activity type to get the sum of clicks by content name
student_vle_summary_grp_activity <- student_vle_summary_stg %>%
group_by(id_student,week_number,code_module) %>%
summarise(total_sum_clicks_weekly = sum(as.numeric(sum_clicks_weekly)))
#5.3 filter out the student vle activity not needed
student_vle_summary_grp_activity_filter <- inner_join(student_info_summary_stg,student_vle_summary_grp_activity,by=c("id_student","code_module"))
#5.4 pivot the data to get each week and activity as column and sum of clicks as value
student_vle_summary_grp_activity_transform <- student_vle_summary_grp_activity_filter %>%
select(id_student,week_number,total_sum_clicks_weekly) %>%
mutate(
week_category_active = paste(week_number,'-active'),
week_active = 1
)
# 5.5 pivot the data for preparing it for machine learning.
student_weekly_summary_clicks <- spread(student_vle_summary_grp_activity_transform[,c("id_student","week_number","total_sum_clicks_weekly")],week_number,total_sum_clicks_weekly)
#5.6 pivot the data to get active flag for each week for each student
student_weekly_active <- student_vle_summary_grp_activity_transform %>%
select(id_student,week_category_active,week_active) %>%
distinct()
student_weekly_active_flag <- spread(student_weekly_active[,c("id_student","week_category_active","week_active")],week_category_active,week_active)
#5.7 combine sudent active flag and sum of clicks
student_vle_weekly_summary <- inner_join(student_weekly_summary_clicks,student_weekly_active_flag,by="id_student")
# STEP 6 - Combine student demographics and vle activity data
student_all_info <- inner_join(student_info_summary_stg_assess,student_vle_weekly_summary,by="id_student")
# STEP 7 - Run grower distance clustering
#We need to prepare the data - to remove NAs and remove student id
student_all_info_kmeans <- student_all_info
# Replace NA with 0
student_all_info_kmeans [is.na(student_all_info_kmeans)] <- 0
student_all_info_kmeans <- rename(student_all_info_kmeans, initial_active = 'intial weeks -active')
student_all_info_kmeans <- rename(student_all_info_kmeans, mid_active = 'mid weeks -active')
student_all_info_kmeans <- rename(student_all_info_kmeans, late_active = 'late weeks -active')
#drop column student id,region,code_module,code_presentation
student_all_info_kmeans <- subset(student_all_info_kmeans, select = -c(id_student,code_presentation,region,initial_active,mid_active,late_active,final_result) )
#Apply scaling to numeric columns
student_all_info_kmeans <- student_all_info_kmeans %>% mutate_if(is.numeric, ~(scale(.) %>% as.vector))
View(student_all_info_kmeans)
#5.7 combine sudent active flag and sum of clicks
student_vle_weekly_summary <- inner_join(student_weekly_summary_clicks,student_weekly_active_flag,by="id_student")
# STEP 6 - Combine student demographics and vle activity data
student_all_info <- inner_join(student_info_summary_stg_assess,student_vle_weekly_summary,by="id_student")
# STEP 7 - Run grower distance clustering
#We need to prepare the data - to remove NAs and remove student id
student_all_info_kmeans <- student_all_info
# Replace NA with 0
student_all_info_kmeans [is.na(student_all_info_kmeans)] <- 0
student_all_info_kmeans <- rename(student_all_info_kmeans, initial_active = 'intial weeks -active')
student_all_info_kmeans <- rename(student_all_info_kmeans, mid_active = 'mid weeks -active')
student_all_info_kmeans <- rename(student_all_info_kmeans, late_active = 'late weeks -active')
#drop column student id,region,code_module,code_presentation
student_all_info_kmeans <- subset(student_all_info_kmeans, select = -c(id_student,code_presentation,region,initial_active,mid_active,late_active) )
View(student_all_info_kmeans)
student_all_info_kmeans_numerical <- student_all_info_kmeans %>%
mutate(
gender_numerical = case_when(
gender == "F" ~1,
TRUE ~0
),
code_module_numerical =case_when(
code_module == "AAA" ~1,
code_module == "BBB" ~2,
code_module == "CCC" ~3,
code_module == "DDD" ~4,
code_module == "EEE" ~5,
code_module == "FFF" ~6,
TRUE ~ 7
),
age_band_numerical =case_when(
age_band == "0-35" ~1,
age_band == "35-55" ~2
TRUE ~ 3
),
final_result_numerical = case_when(
final_result  == "Pass" ~1,
final_result  == "Distinction" ~2,
final_result  == "Fail" ~3,
TRUE ~4
),
highest_education_numerical = case_when(
highest_education == "Lower Than A Level" ~ 1,
highest_education == "A Level or Equivalent" ~ 2,
highest_education == "HE Qualification" ~ 3,
highest_education == "Post Graduate Qualification" ~ 4,
TRUE ~5
)
)
student_all_info_kmeans_numerical <- student_all_info_kmeans %>%
mutate(
gender_numerical = case_when(
gender == "F" ~1,
TRUE ~0
),
code_module_numerical =case_when(
code_module == "AAA" ~1,
code_module == "BBB" ~2,
code_module == "CCC" ~3,
code_module == "DDD" ~4,
code_module == "EEE" ~5,
code_module == "FFF" ~6,
TRUE ~ 7
),
age_band_numerical =case_when(
age_band == "0-35" ~1,
age_band == "35-55" ~2,
TRUE ~ 3
),
final_result_numerical = case_when(
final_result  == "Pass" ~1,
final_result  == "Distinction" ~2,
final_result  == "Fail" ~3,
TRUE ~4
),
highest_education_numerical = case_when(
highest_education == "Lower Than A Level" ~ 1,
highest_education == "A Level or Equivalent" ~ 2,
highest_education == "HE Qualification" ~ 3,
highest_education == "Post Graduate Qualification" ~ 4,
TRUE ~5
)
)
View(student_all_info_kmeans_numerical)
student_all_info_kmeans_numerical <- student_all_info_kmeans %>%
mutate(
gender_numerical = case_when(
gender == "F" ~1,
TRUE ~2
),
code_module_numerical =case_when(
code_module == "AAA" ~1,
code_module == "BBB" ~2,
code_module == "CCC" ~3,
code_module == "DDD" ~4,
code_module == "EEE" ~5,
code_module == "FFF" ~6,
TRUE ~ 7
),
age_band_numerical =case_when(
age_band == "0-35" ~1,
age_band == "35-55" ~2,
TRUE ~ 3
),
final_result_numerical = case_when(
final_result  == "Pass" ~1,
final_result  == "Distinction" ~2,
final_result  == "Fail" ~3,
TRUE ~4
),
highest_education_numerical = case_when(
highest_education == "Lower Than A Level" ~ 1,
highest_education == "A Level or Equivalent" ~ 2,
highest_education == "HE Qualification" ~ 3,
highest_education == "Post Graduate Qualification" ~ 4,
TRUE ~5
)
)
write.csv(student_all_info_kmeans_numerical,"student_all_info_kmeans_numerical.csv")
student_all_info_kmeans <- student_all_info
# Replace NA with 0
student_all_info_kmeans [is.na(student_all_info_kmeans)] <- 0
student_all_info_kmeans <- rename(student_all_info_kmeans, initial_active = 'intial weeks -active')
student_all_info_kmeans <- rename(student_all_info_kmeans, mid_active = 'mid weeks -active')
student_all_info_kmeans <- rename(student_all_info_kmeans, late_active = 'late weeks -active')
#drop column student id,region,code_module,code_presentation
student_all_info_kmeans <- subset(student_all_info_kmeans, select = -c(id_student,code_presentation,initial_active,mid_active,late_active))
#Convert categorical columns into factors
student_all_info_kmeans$code_module <- as.factor(student_all_info_kmeans$code_module)
student_all_info_kmeans$final_result <- as.factor(student_all_info_kmeans$final_result)
student_all_info_kmeans$gender <- as.factor(student_all_info_kmeans$gender)
student_all_info_kmeans$highest_education <- as.factor(student_all_info_kmeans$highest_education)
student_all_info_kmeans$region <- as.factor(student_all_info_kmeans$region)
student_all_info_kmeans$age_band <- as.factor(student_all_info_kmeans$age_band)
#Apply scaling to numeric columns
student_all_info_kmeans <- student_all_info_kmeans %>% mutate_if(is.numeric, ~(scale(.) %>% as.vector))
View(student_all_info_kmeans)
memory.limit(100000)
rm(studentvle)
#Apply scaling to numeric columns
student_all_info_kmeans <- student_all_info_kmeans %>% mutate_if(is.numeric, ~(scale(.) %>% as.vector))
set.seed(10)
#Apply clustering - gower distance
# This requires atleast enough memory to run
###  ---> to run this first use --> memory.limit(24000)
gower_dist <- daisy(student_all_info_kmeans, metric = "gower")
# fit the clusters - best clusters is 3.
k <- 3
pam_fit <- pam(gower_dist, diss = TRUE, k)
pam_results <- student_all_info_kmeans %>%
mutate(cluster = pam_fit$clustering) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
pam_results$the_summary
#write the clusters in student_info object
student_all_info$cluster <- pam_fit$clustering
#STEP 8 - find the lower dimensions so we can visualise the clusters in D3.
#drop column student id,code_presentation and weeks active flag
student_pca_stg <- subset(student_all_info, select = -c(id_student,code_presentation,initial_active,mid_active,late_active))
student_pca_stg [is.na(student_pca_stg)] <- 0
student_pca_stg <- student_all_info
student_pca_stg [is.na(student_pca_stg)] <- 0
student_pca_stg <- rename(student_pca_stg, initial_active = 'intial weeks -active')
student_pca_stg <- rename(student_pca_stg, mid_active = 'mid weeks -active')
student_pca_stg <- rename(student_pca_stg, late_active = 'late weeks -active')
student_pca_stg <- subset(student_pca_stg, select = -c(id_student,code_presentation,initial_active,mid_active,late_active))
student_pca <- student_pca_stg %>%
mutate(
gender_numerical = case_when(
gender == "F" ~1,
TRUE ~2
),
code_module_numerical =case_when(
code_module == "AAA" ~1,
code_module == "BBB" ~2,
code_module == "CCC" ~3,
code_module == "DDD" ~4,
code_module == "EEE" ~5,
code_module == "FFF" ~6,
TRUE ~ 7
),
age_band_numerical =case_when(
age_band == "0-35" ~1,
age_band == "35-55" ~2,
TRUE ~ 3
),
final_result_numerical = case_when(
final_result  == "Pass" ~1,
final_result  == "Distinction" ~2,
final_result  == "Fail" ~3,
TRUE ~4
),
highest_education_numerical = case_when(
highest_education == "Lower Than A Level" ~ 1,
highest_education == "A Level or Equivalent" ~ 2,
highest_education == "HE Qualification" ~ 3,
highest_education == "Post Graduate Qualification" ~ 4,
TRUE ~5
)
)
View(student_pca)
#drop column student id,code_presentation and weeks active flag
student_pca_stg <- student_all_info
student_pca_stg [is.na(student_pca_stg)] <- 0
student_pca_stg <- rename(student_pca_stg, initial_active = 'intial weeks -active')
student_pca_stg <- rename(student_pca_stg, mid_active = 'mid weeks -active')
student_pca_stg <- rename(student_pca_stg, late_active = 'late weeks -active')
student_pca_stg <- subset(student_pca_stg, select = -c(id_student,code_presentation,initial_active,mid_active,late_active,region))
student_pca <- student_pca_stg %>%
mutate(
gender_numerical = case_when(
gender == "F" ~1,
TRUE ~2
),
code_module_numerical =case_when(
code_module == "AAA" ~1,
code_module == "BBB" ~2,
code_module == "CCC" ~3,
code_module == "DDD" ~4,
code_module == "EEE" ~5,
code_module == "FFF" ~6,
TRUE ~ 7
),
age_band_numerical =case_when(
age_band == "0-35" ~1,
age_band == "35-55" ~2,
TRUE ~ 3
),
final_result_numerical = case_when(
final_result  == "Pass" ~1,
final_result  == "Distinction" ~2,
final_result  == "Fail" ~3,
TRUE ~4
),
highest_education_numerical = case_when(
highest_education == "Lower Than A Level" ~ 1,
highest_education == "A Level or Equivalent" ~ 2,
highest_education == "HE Qualification" ~ 3,
highest_education == "Post Graduate Qualification" ~ 4,
TRUE ~5
)
)
student_pca <- subset(student_pca, select = -c(gender,highest_education,final_result,age_band,code_module))
View(student_pca)
student_pca.pca <- prcomp(student_pca, center = TRUE,scale. = TRUE)
head(student_pca.pca)
student_pca.pca$x['PC1']
student_all_info$x <- student_pca.pca$x[,"PC1"]
student_all_info$y <- student_pca.pca$Y[,'PC2']
student_all_info[is.na(student_all_info)] <- 0
write.csv(student_all_info,"processeddata/student_all_info_clusters.csv",row.names=FALSE)
student_pca.pca['cluster'] <- pam_fit$clustering
ggplot(student_all_info,aes(x=x,y=y,color = as.factor(cluster))) + geom_point()
head(student_all_info)
View(student_all_info)
student_all_info$x <- student_pca.pca$x[,"PC1"]
student_all_info$y <- student_pca.pca$x[,'PC2']
student_all_info[is.na(student_all_info)] <- 0
write.csv(student_all_info,"processeddata/student_all_info_clusters.csv",row.names=FALSE)
ggplot(student_all_info,aes(x=x,y=y,color = as.factor(cluster))) + geom_point()
write.csv(student_all_info,"processeddata/student_all_info_clusters.csv",row.names=FALSE)
#STEP 1 - Read the student clusters from the file created by student_cluster_segment.R script
student_cluster_summary <- read.csv('processeddata/student_all_info_clusters.csv')
student_cluster_summary <- rename(student_cluster_summary, study_pattern = code_module)
student_cluster_summary <- rename(student_cluster_summary, study_outcome = final_result)
#STEP 2 - Group the students in small buckets, so they can easily visualise bubbles in D3.
stu_visualise_stg_1 <- student_cluster_summary%>%
group_by(study_outcome,gender,highest_education,age_band,cluster,intial.weeks..active,mid.weeks..active,late.weeks..active)%>%
summarise(sum_initial_weeks_clicks = sum(intial.weeks) ,
sum_late_weeks_clicks =   sum(late.weeks),
sum_mid_weeks_clicks = sum(mid.weeks),
sum_all_weeks_clicks = sum(intial.weeks,late.weeks,mid.weeks),
weeks_active = sum(intial.weeks..active,mid.weeks..active,late.weeks..active),
sum_x = sum(x),
sum_y = sum(y),
total_students = sum(n()),
sum_score = sum(score_avg))
#STEP 3 - calculate the clicks /student and other aggregated measures for visualisation
stu_visualise_stg_2 <- stu_visualise_stg_1 %>%
select(study_outcome,gender,highest_education,age_band,cluster,intial.weeks..active,mid.weeks..active,late.weeks..active,sum_initial_weeks_clicks,total_students,
sum_mid_weeks_clicks,sum_late_weeks_clicks,sum_x,sum_y,sum_all_weeks_clicks,weeks_active,sum_score) %>%
mutate(
initial_weeks_clicks_per_student = round(sum_initial_weeks_clicks/total_students),
mid_weeks_clicks_per_student = round(sum_mid_weeks_clicks/total_students),
late_weeks_clicks_per_student = round(sum_late_weeks_clicks/total_students),
avg_clicks_per_student = round(sum_all_weeks_clicks/total_students),
percent_weeks_active = (round(weeks_active/total_students)/3) * 100,
x = sum_x/total_students,
y = sum_y/total_students,
grade = case_when(
study_outcome == "Pass" ~ "Pass",
study_outcome == "Distinction" ~ "Pass",
TRUE ~ "Fail"
),
gender_age_band = paste(gender,'-',age_band),
gender_grade = paste(gender,'-',grade),
xposition = x + 60,
yposition = y +60,
avg_score = round(sum_score/total_students)
)
View(stu_visualise_stg_2)
#STEP 4 - Give a dummy group identifier for each group
stu_visualise_stg_2['group_id'] <- ids::random_id(532,3)
#STEP 5 - Write to output file, so D3 can read it from this file.
write.csv(stu_visualise_stg_2,'processeddata/stu_visualise_data.csv',row.names=FALSE)
stu_visualise_stg_2 <- stu_visualise_stg_1 %>%
select(study_outcome,gender,highest_education,age_band,cluster,intial.weeks..active,mid.weeks..active,late.weeks..active,sum_initial_weeks_clicks,total_students,
sum_mid_weeks_clicks,sum_late_weeks_clicks,sum_x,sum_y,sum_all_weeks_clicks,weeks_active,sum_score) %>%
mutate(
initial_weeks_clicks_per_student = round(sum_initial_weeks_clicks/total_students),
mid_weeks_clicks_per_student = round(sum_mid_weeks_clicks/total_students),
late_weeks_clicks_per_student = round(sum_late_weeks_clicks/total_students),
avg_clicks_per_student = round(sum_all_weeks_clicks/total_students),
percent_weeks_active = (round(weeks_active/total_students)/3) * 100,
x = sum_x/total_students,
y = sum_y/total_students,
grade = case_when(
study_outcome == "Pass" ~ "Pass",
study_outcome == "Distinction" ~ "Pass",
TRUE ~ "Fail"
),
gender_age_band = paste(gender,'-',age_band),
gender_grade = paste(gender,'-',grade),
xposition = x + 20,
yposition = y +5,
avg_score = round(sum_score/total_students)
)
#STEP 4 - Give a dummy group identifier for each group
stu_visualise_stg_2['group_id'] <- ids::random_id(532,3)
#STEP 5 - Write to output file, so D3 can read it from this file.
write.csv(stu_visualise_stg_2,'processeddata/stu_visualise_data.csv',row.names=FALSE)
#STEP 5 - Write to output file, so D3 can read it from this file.
write.csv(stu_visualise_stg_2,'processeddata/stu_visualise_data.csv',row.names=FALSE)
stu_visualise_stg_2 <- stu_visualise_stg_1 %>%
select(study_outcome,gender,highest_education,age_band,cluster,intial.weeks..active,mid.weeks..active,late.weeks..active,sum_initial_weeks_clicks,total_students,
sum_mid_weeks_clicks,sum_late_weeks_clicks,sum_x,sum_y,sum_all_weeks_clicks,weeks_active,sum_score) %>%
mutate(
initial_weeks_clicks_per_student = round(sum_initial_weeks_clicks/total_students),
mid_weeks_clicks_per_student = round(sum_mid_weeks_clicks/total_students),
late_weeks_clicks_per_student = round(sum_late_weeks_clicks/total_students),
avg_clicks_per_student = round(sum_all_weeks_clicks/total_students),
percent_weeks_active = (round(weeks_active/total_students)/3) * 100,
x = sum_x/total_students,
y = sum_y/total_students,
grade = case_when(
study_outcome == "Pass" ~ "Pass",
study_outcome == "Distinction" ~ "Pass",
TRUE ~ "Fail"
),
gender_age_band = paste(gender,'-',age_band),
gender_grade = paste(gender,'-',grade),
xposition = x + 20,
yposition = y +5,
avg_score = round(sum_score/total_students),
score_bucket = case_when(
avg_score > 60  ~ "g60",
TRUE ~ "l60"
),
)
#STEP 4 - Give a dummy group identifier for each group
stu_visualise_stg_2['group_id'] <- ids::random_id(532,3)
#STEP 5 - Write to output file, so D3 can read it from this file.
write.csv(stu_visualise_stg_2,'processeddata/stu_visualise_data.csv',row.names=FALSE)
stu_visualise_stg_2 <- stu_visualise_stg_1 %>%
select(study_outcome,gender,highest_education,age_band,cluster,intial.weeks..active,mid.weeks..active,late.weeks..active,sum_initial_weeks_clicks,total_students,
sum_mid_weeks_clicks,sum_late_weeks_clicks,sum_x,sum_y,sum_all_weeks_clicks,weeks_active,sum_score) %>%
mutate(
initial_weeks_clicks_per_student = round(sum_initial_weeks_clicks/total_students),
mid_weeks_clicks_per_student = round(sum_mid_weeks_clicks/total_students),
late_weeks_clicks_per_student = round(sum_late_weeks_clicks/total_students),
avg_clicks_per_student = round(sum_all_weeks_clicks/total_students),
percent_weeks_active = (round(weeks_active/total_students)/3) * 100,
x = sum_x/total_students,
y = sum_y/total_students,
grade = case_when(
study_outcome == "Pass" ~ "Pass",
study_outcome == "Distinction" ~ "Pass",
TRUE ~ "Fail"
),
gender_age_band = paste(gender,'-',age_band),
xposition = x + 20,
yposition = y +5,
avg_score = round(sum_score/total_students),
score_bucket = case_when(
avg_score > 60  ~ "g60",
TRUE ~ "l60"
),
gender_grade = paste(gender,'-',avg_score)
)
#STEP 4 - Give a dummy group identifier for each group
stu_visualise_stg_2['group_id'] <- ids::random_id(532,3)
#STEP 5 - Write to output file, so D3 can read it from this file.
write.csv(stu_visualise_stg_2,'processeddata/stu_visualise_data.csv',row.names=FALSE)
stu_visualise_stg_2 <- stu_visualise_stg_1 %>%
select(study_outcome,gender,highest_education,age_band,cluster,intial.weeks..active,mid.weeks..active,late.weeks..active,sum_initial_weeks_clicks,total_students,
sum_mid_weeks_clicks,sum_late_weeks_clicks,sum_x,sum_y,sum_all_weeks_clicks,weeks_active,sum_score) %>%
mutate(
initial_weeks_clicks_per_student = round(sum_initial_weeks_clicks/total_students),
mid_weeks_clicks_per_student = round(sum_mid_weeks_clicks/total_students),
late_weeks_clicks_per_student = round(sum_late_weeks_clicks/total_students),
avg_clicks_per_student = round(sum_all_weeks_clicks/total_students),
percent_weeks_active = (round(weeks_active/total_students)/3) * 100,
x = sum_x/total_students,
y = sum_y/total_students,
grade = case_when(
study_outcome == "Pass" ~ "Pass",
study_outcome == "Distinction" ~ "Pass",
TRUE ~ "Fail"
),
gender_age_band = paste(gender,'-',age_band),
xposition = x + 20,
yposition = y +5,
avg_score = round(sum_score/total_students),
score_bucket = case_when(
avg_score > 60  ~ "g60",
TRUE ~ "l60"
),
gender_grade = paste(gender,'-',score_bucket)
)
#STEP 4 - Give a dummy group identifier for each group
stu_visualise_stg_2['group_id'] <- ids::random_id(532,3)
#STEP 5 - Write to output file, so D3 can read it from this file.
write.csv(stu_visualise_stg_2,'processeddata/stu_visualise_data.csv',row.names=FALSE)
studentvle  <- read.csv('data/studentVle.csv')
